{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Omar\\\\Desktop\\\\trivia_project\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        type: 'GET',\n        success: result => {\n          this.setState({\n            view: 'list',\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = () => {\n      const _this$state = this.state,\n            page = _this$state.page,\n            currentCategory = _this$state.currentCategory;\n      $.ajax({\n        url: \"/categories/\".concat(currentCategory, \"/questions?page=\").concat(page),\n        type: 'GET',\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.handleCategoryClick = categoryId => {\n      this.setState({\n        view: 'in_category',\n        page: 1,\n        currentCategory: categoryId\n      }, () => this.getByCategory());\n    };\n\n    this.search = () => {\n      const _this$state2 = this.state,\n            page = _this$state2.page,\n            searchTerm = _this$state2.searchTerm;\n      $.ajax({\n        url: \"/questions?page=\".concat(page),\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          search_term: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      this.setState({\n        view: 'search',\n        page: 1,\n        searchTerm: searchTerm\n      }, () => this.search());\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            type: 'DELETE',\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      view: 'list',\n      searchTerm: null,\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    if (this.state.view === 'search') {\n      this.setState({\n        page: num\n      }, () => this.search());\n    } else {\n      this.setState({\n        page: num\n      }, () => this.getQuestions());\n    }\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.state.categories.map(category => React.createElement(\"li\", {\n      key: category.id,\n      onClick: () => {\n        this.handleCategoryClick(category.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, category.type, React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(category.type, \".svg\"),\n      alt: \"Category \".concat(category.type),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories.filter(c => c.id === q.category)[0]['type'],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:\\Users\\Omar\\Desktop\\trivia_project\\frontend\\src\\components\\QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","view","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","handleCategoryClick","categoryId","search","searchTerm","dataType","contentType","data","JSON","stringify","search_term","xhrFields","withCredentials","crossDomain","submitSearch","questionAction","id","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","category","q","ind","question","answer","filter","c","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      view: 'list',\n      searchTerm: null,\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`,\n      type: 'GET',\n      success: result => {\n        this.setState({\n          view: 'list',\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  selectPage(num) {\n    if (this.state.view === 'search') {\n      this.setState({ page: num }, () => this.search());\n    } else {\n      this.setState({ page: num }, () => this.getQuestions());\n    }\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {\n            this.selectPage(i);\n          }}\n        >\n          {i}\n        </span>\n      );\n    }\n    return pageNumbers;\n  }\n\n  getByCategory = () => {\n    const { page, currentCategory } = this.state;\n\n    $.ajax({\n      url: `/categories/${currentCategory}/questions?page=${page}`,\n      type: 'GET',\n      success: result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  handleCategoryClick = categoryId => {\n    this.setState(\n      {\n        view: 'in_category',\n        page: 1,\n        currentCategory: categoryId,\n      },\n      () => this.getByCategory()\n    );\n  };\n\n  search = () => {\n    const { page, searchTerm } = this.state;\n\n    $.ajax({\n      url: `/questions?page=${page}`,\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({ search_term: searchTerm }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      },\n    });\n  };\n  submitSearch = searchTerm => {\n    this.setState(\n      {\n        view: 'search',\n        page: 1,\n        searchTerm: searchTerm,\n      },\n      () => this.search()\n    );\n  };\n\n  questionAction = id => action => {\n    if (action === 'DELETE') {\n      if (window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`,\n          type: 'DELETE',\n          success: result => {\n            this.getQuestions();\n          },\n          error: error => {\n            alert('Unable to load questions. Please try your request again');\n            return;\n          },\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2\n            onClick={() => {\n              this.getQuestions();\n            }}\n          >\n            Categories\n          </h2>\n          <ul>\n            {this.state.categories.map(category =>\n              <li\n                key={category.id}\n                onClick={() => {\n                  this.handleCategoryClick(category.id);\n                }}\n              >\n                {category.type}\n                <img\n                  className=\"category\"\n                  src={`${category.type}.svg`}\n                  alt={`Category ${category.type}`}\n                />\n              </li>\n            )}\n          </ul>\n          <Search submitSearch={this.submitSearch} />\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) =>\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={\n                this.state.categories.filter(c => c.id === q.category)[0]['type']\n              }\n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          )}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}