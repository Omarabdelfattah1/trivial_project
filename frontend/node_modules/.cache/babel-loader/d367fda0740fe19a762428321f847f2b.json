{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Omar\\\\Desktop\\\\trivia_project\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = category => {\n      this.setState({\n        quizCategory: category\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: {},\n      showAnswer: false,\n      categories: [],\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      type: 'GET',\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"ALL\"), this.state.categories.map(cateogry => {\n      return React.createElement(\"div\", {\n        key: cateogry.id,\n        value: cateogry.id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory(cateogry),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, cateogry.type);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, ' ', \"Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, ' ', \"Play Again?\", ' '));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, evaluate ? 'You were correct!' : 'You were incorrect'), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, ' ', \"Next Question\", ' '));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\Omar\\Desktop\\trivia_project\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","category","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","id","push","ajax","url","type","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","map","cateogry","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      quizCategory: null,\n      previousQuestions: {},\n      showAnswer: false,\n      categories: [],\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`,\n      type: 'GET',\n      success: result => {\n        this.setState({ categories: result.categories });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      },\n    });\n  }\n\n  selectCategory = (category) => {\n    this.setState({ quizCategory: category }, this.getNextQuestion);\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions];\n    if (this.state.currentQuestion.id) {\n      previousQuestions.push(this.state.currentQuestion.id);\n    }\n\n    $.ajax({\n      url: '/quizzes',\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory,\n      }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: result => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true,\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load question. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  submitGuess = event => {\n    event.preventDefault();\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    });\n  };\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n    });\n  };\n\n  renderPrePlay() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"choose-header\">Choose Category</div>\n        <div className=\"category-holder\">\n          <div className=\"play-category\" onClick={this.selectCategory}>\n            ALL\n          </div>\n          {this.state.categories.map(cateogry => {\n            return (\n              <div\n                key={cateogry.id}\n                value={cateogry.id}\n                className=\"play-category\"\n                onClick={() => this.selectCategory(cateogry)}\n              >\n                {cateogry.type}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderFinalScore() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\">\n          {' '}Your Final Score is {this.state.numCorrect}\n        </div>\n        <div className=\"play-again button\" onClick={this.restartGame}>\n          {' '}Play Again?{' '}\n        </div>\n      </div>\n    );\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n    const answerArray = this.state.currentQuestion.answer\n      .toLowerCase()\n      .split(' ');\n    return answerArray.includes(formatGuess);\n  };\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">\n          {this.state.currentQuestion.question}\n        </div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>\n          {evaluate ? 'You were correct!' : 'You were incorrect'}\n        </div>\n        <div className=\"quiz-answer\">\n          {this.state.currentQuestion.answer}\n        </div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}>\n          {' '}Next Question{' '}\n        </div>\n      </div>\n    );\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay ||\n    this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">\n              {this.state.currentQuestion.question}\n            </div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\n              <input\n                className=\"submit-guess button\"\n                type=\"submit\"\n                value=\"Submit Answer\"\n              />\n            </form>\n          </div>;\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n}\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}